
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun May 01 16:35:40 CEST 2016
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Sun May 01 16:35:40 CEST 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\004\000\002\003\004\000\002\004" +
    "\004\000\002\004\002\000\002\005\005\000\002\011\005" +
    "\000\002\011\003\000\002\012\003\000\002\012\006\000" +
    "\002\012\006\000\002\012\005\000\002\012\004\000\002" +
    "\010\004\000\002\010\003\000\002\035\004\000\002\035" +
    "\003\000\002\036\004\000\002\036\003\000\002\037\003" +
    "\000\002\037\003\000\002\034\003\000\002\034\003\000" +
    "\002\033\003\000\002\033\003\000\002\032\003\000\002" +
    "\032\003\000\002\006\004\000\002\006\003\000\002\007" +
    "\004\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\016\005\000\002\013\003\000\002\013\004\000" +
    "\002\015\003\000\002\015\003\000\002\014\003\000\002" +
    "\014\003\000\002\017\005\000\002\017\003\000\002\021" +
    "\007\000\002\022\007\000\002\022\011\000\002\024\005" +
    "\000\002\024\005\000\002\024\004\000\002\024\003\000" +
    "\002\023\005\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\004\000\002\025" +
    "\004\000\002\020\005\000\002\020\005\000\002\020\003" +
    "\000\002\026\005\000\002\026\005\000\002\026\003\000" +
    "\002\027\005\000\002\027\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\004\000\002\031\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\157\000\034\006\ufffe\007\ufffe\010\ufffe\011\ufffe\026" +
    "\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe\046\ufffe\047\ufffe" +
    "\050\ufffe\051\ufffe\001\002\000\034\006\023\007\033\010" +
    "\021\011\015\026\016\042\035\043\012\044\040\045\020" +
    "\046\036\047\011\050\024\051\010\001\002\000\004\002" +
    "\006\001\002\000\004\002\001\001\002\000\034\006\uffff" +
    "\007\uffff\010\uffff\011\uffff\026\uffff\042\uffff\043\uffff\044" +
    "\uffff\045\uffff\046\uffff\047\uffff\050\uffff\051\uffff\001\002" +
    "\000\016\042\uffe9\043\uffe9\044\uffe9\045\uffe9\046\uffe9\047" +
    "\uffe9\001\002\000\006\042\uffea\043\uffea\001\002\000\006" +
    "\006\uffee\026\uffee\001\002\000\022\002\uffe2\006\uffe2\007" +
    "\uffe2\010\uffe2\011\uffe2\013\uffe2\017\uffe2\026\uffe2\001\002" +
    "\000\006\006\023\026\016\001\002\000\004\014\151\001" +
    "\002\000\006\006\023\026\016\001\002\000\016\042\035" +
    "\043\012\044\040\045\020\046\036\047\011\001\002\000" +
    "\012\042\uffec\043\uffec\046\uffec\047\uffec\001\002\000\004" +
    "\014\113\001\002\000\006\006\ufff4\026\ufff4\001\002\000" +
    "\044\015\ufffa\020\ufffa\021\ufffa\022\105\023\ufffa\024\ufffa" +
    "\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\034" +
    "\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\001\002\000\016" +
    "\042\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8\001" +
    "\002\000\012\042\035\043\012\046\036\047\011\001\002" +
    "\000\006\006\ufff0\026\ufff0\001\002\000\022\002\uffe3\006" +
    "\uffe3\007\uffe3\010\uffe3\011\uffe3\013\uffe3\017\uffe3\026\uffe3" +
    "\001\002\000\016\002\000\006\023\007\033\010\021\011" +
    "\015\026\016\001\002\000\004\023\102\001\002\000\004" +
    "\036\100\001\002\000\004\014\044\001\002\000\006\006" +
    "\ufff2\026\ufff2\001\002\000\006\006\uffef\026\uffef\001\002" +
    "\000\006\042\uffeb\043\uffeb\001\002\000\020\002\uffe6\006" +
    "\uffe6\007\uffe6\010\uffe6\011\uffe6\017\uffe6\026\uffe6\001\002" +
    "\000\012\042\uffed\043\uffed\046\uffed\047\uffed\001\002\000" +
    "\006\042\035\043\012\001\002\000\022\002\uffe4\006\uffe4" +
    "\007\uffe4\010\uffe4\011\uffe4\013\uffe4\017\uffe4\026\uffe4\001" +
    "\002\000\006\006\ufff1\026\ufff1\001\002\000\020\004\047" +
    "\005\055\006\023\014\045\024\054\025\046\026\016\001" +
    "\002\000\020\004\047\005\055\006\023\014\045\024\054" +
    "\025\046\026\016\001\002\000\012\004\uffdd\005\uffdd\006" +
    "\uffdd\026\uffdd\001\002\000\036\015\uffdc\023\uffdc\024\uffdc" +
    "\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\034" +
    "\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\001\002\000\036" +
    "\015\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030" +
    "\uffc1\031\uffc1\032\uffc1\034\uffc1\036\uffc1\037\uffc1\040\uffc1" +
    "\041\uffc1\001\002\000\036\015\uffe0\023\uffe0\024\uffe0\025" +
    "\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\034\uffe0" +
    "\036\uffe0\037\uffe0\040\uffe0\041\uffe0\001\002\000\012\004" +
    "\047\005\055\006\023\026\016\001\002\000\036\015\uffc2" +
    "\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031" +
    "\uffc2\032\uffc2\034\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2" +
    "\001\002\000\012\004\uffde\005\uffde\006\uffde\026\uffde\001" +
    "\002\000\036\015\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb" +
    "\027\uffdb\030\uffdb\031\uffdb\032\uffdb\034\uffdb\036\uffdb\037" +
    "\uffdb\040\uffdb\041\uffdb\001\002\000\036\015\uffc3\023\uffc3" +
    "\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032" +
    "\uffc3\034\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\001\002" +
    "\000\036\015\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027" +
    "\uffc5\030\uffc5\031\uffc5\032\uffc5\034\uffc5\036\uffc5\037\uffc5" +
    "\040\uffc5\041\uffc5\001\002\000\036\015\uffc8\023\uffc8\024" +
    "\uffc8\025\uffc8\026\067\027\070\030\uffc8\031\uffc8\032\uffc8" +
    "\034\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\001\002\000" +
    "\010\015\064\024\062\025\063\001\002\000\020\004\047" +
    "\005\055\006\023\014\045\024\054\025\046\026\016\001" +
    "\002\000\020\004\047\005\055\006\023\014\045\024\054" +
    "\025\046\026\016\001\002\000\004\023\065\001\002\000" +
    "\022\002\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf\013\uffbf" +
    "\017\uffbf\026\uffbf\001\002\000\036\015\uffc9\023\uffc9\024" +
    "\uffc9\025\uffc9\026\067\027\070\030\uffc9\031\uffc9\032\uffc9" +
    "\034\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\001\002\000" +
    "\020\004\047\005\055\006\023\014\045\024\054\025\046" +
    "\026\016\001\002\000\020\004\047\005\055\006\023\014" +
    "\045\024\054\025\046\026\016\001\002\000\036\015\uffc6" +
    "\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031" +
    "\uffc6\032\uffc6\034\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6" +
    "\001\002\000\036\015\uffc7\023\uffc7\024\uffc7\025\uffc7\026" +
    "\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\034\uffc7\036\uffc7" +
    "\037\uffc7\040\uffc7\041\uffc7\001\002\000\036\015\uffca\023" +
    "\uffca\024\uffca\025\uffca\026\067\027\070\030\uffca\031\uffca" +
    "\032\uffca\034\uffca\036\uffca\037\uffca\040\uffca\041\uffca\001" +
    "\002\000\036\015\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0" +
    "\027\uffc0\030\uffc0\031\uffc0\032\uffc0\034\uffc0\036\uffc0\037" +
    "\uffc0\040\uffc0\041\uffc0\001\002\000\036\015\uffdf\023\uffdf" +
    "\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032" +
    "\uffdf\034\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\001\002" +
    "\000\010\015\077\024\062\025\063\001\002\000\036\015" +
    "\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4" +
    "\031\uffc4\032\uffc4\034\uffc4\036\uffc4\037\uffc4\040\uffc4\041" +
    "\uffc4\001\002\000\020\004\047\005\055\006\023\014\045" +
    "\024\054\025\046\026\016\001\002\000\010\023\uffe1\024" +
    "\062\025\063\001\002\000\022\002\uffe5\006\uffe5\007\uffe5" +
    "\010\uffe5\011\uffe5\013\uffe5\017\uffe5\026\uffe5\001\002\000" +
    "\020\002\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\017\uffe7" +
    "\026\uffe7\001\002\000\006\006\ufff3\026\ufff3\001\002\000" +
    "\012\004\107\006\023\020\110\026\016\001\002\000\004" +
    "\020\112\001\002\000\004\020\111\001\002\000\042\015" +
    "\ufff7\020\ufff7\021\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7" +
    "\027\ufff7\030\ufff7\031\ufff7\032\ufff7\034\ufff7\036\ufff7\037" +
    "\ufff7\040\ufff7\041\ufff7\001\002\000\042\015\ufff9\020\ufff9" +
    "\021\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030" +
    "\ufff9\031\ufff9\032\ufff9\034\ufff9\036\ufff9\037\ufff9\040\ufff9" +
    "\041\ufff9\001\002\000\042\015\ufff8\020\ufff8\021\ufff8\023" +
    "\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8" +
    "\032\ufff8\034\ufff8\036\ufff8\037\ufff8\040\ufff8\041\ufff8\001" +
    "\002\000\022\004\047\005\055\006\023\014\045\024\054" +
    "\025\046\026\016\041\115\001\002\000\010\015\uffd2\037" +
    "\uffd2\040\uffd2\001\002\000\020\004\047\005\055\006\023" +
    "\014\045\024\054\025\046\026\016\001\002\000\022\024" +
    "\062\025\063\030\142\031\141\032\135\034\140\036\136" +
    "\041\137\001\002\000\010\015\121\037\120\040\122\001" +
    "\002\000\020\004\047\005\055\006\023\014\045\024\054" +
    "\025\046\026\016\001\002\000\016\006\023\007\033\010" +
    "\021\011\015\016\126\026\016\001\002\000\020\004\047" +
    "\005\055\006\023\014\045\024\054\025\046\026\016\001" +
    "\002\000\010\015\uffd4\037\uffd4\040\uffd4\001\002\000\022" +
    "\002\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\013\131\017" +
    "\uffd7\026\uffd7\001\002\000\022\002\uffd9\006\uffd9\007\uffd9" +
    "\010\uffd9\011\uffd9\013\uffd9\017\uffd9\026\uffd9\001\002\000" +
    "\014\006\023\007\033\010\021\011\015\026\016\001\002" +
    "\000\016\006\023\007\033\010\021\011\015\017\130\026" +
    "\016\001\002\000\022\002\uffda\006\uffda\007\uffda\010\uffda" +
    "\011\uffda\013\uffda\017\uffda\026\uffda\001\002\000\016\006" +
    "\023\007\033\010\021\011\015\016\126\026\016\001\002" +
    "\000\022\002\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\013" +
    "\uffd6\017\uffd6\026\uffd6\001\002\000\010\015\uffd5\037\uffd5" +
    "\040\uffd5\001\002\000\020\004\047\005\055\006\023\014" +
    "\045\024\054\025\046\026\016\001\002\000\020\004\uffce" +
    "\005\uffce\006\uffce\014\uffce\024\uffce\025\uffce\026\uffce\001" +
    "\002\000\004\036\144\001\002\000\004\036\143\001\002" +
    "\000\020\004\uffcd\005\uffcd\006\uffcd\014\uffcd\024\uffcd\025" +
    "\uffcd\026\uffcd\001\002\000\020\004\uffcf\005\uffcf\006\uffcf" +
    "\014\uffcf\024\uffcf\025\uffcf\026\uffcf\001\002\000\020\004" +
    "\uffd0\005\uffd0\006\uffd0\014\uffd0\024\uffd0\025\uffd0\026\uffd0" +
    "\001\002\000\020\004\uffcb\005\uffcb\006\uffcb\014\uffcb\024" +
    "\uffcb\025\uffcb\026\uffcb\001\002\000\020\004\uffcc\005\uffcc" +
    "\006\uffcc\014\uffcc\024\uffcc\025\uffcc\026\uffcc\001\002\000" +
    "\014\015\uffd1\024\062\025\063\037\uffd1\040\uffd1\001\002" +
    "\000\010\015\uffd3\037\uffd3\040\uffd3\001\002\000\006\006" +
    "\ufff5\026\ufff5\001\002\000\042\015\ufff6\020\ufff6\021\ufff6" +
    "\023\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031" +
    "\ufff6\032\ufff6\034\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6" +
    "\001\002\000\022\004\047\005\055\006\023\014\045\024" +
    "\054\025\046\026\016\041\115\001\002\000\010\015\153" +
    "\037\120\040\122\001\002\000\016\006\023\007\033\010" +
    "\021\011\015\016\126\026\016\001\002\000\022\002\uffd8" +
    "\006\uffd8\007\uffd8\010\uffd8\011\uffd8\013\uffd8\017\uffd8\026" +
    "\uffd8\001\002\000\006\021\157\023\160\001\002\000\006" +
    "\021\ufffb\023\ufffb\001\002\000\006\006\023\026\016\001" +
    "\002\000\034\006\ufffd\007\ufffd\010\ufffd\011\ufffd\026\ufffd" +
    "\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd\050" +
    "\ufffd\051\ufffd\001\002\000\006\021\ufffc\023\ufffc\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\157\000\006\003\004\004\003\001\001\000\040\005" +
    "\006\006\027\007\036\010\013\012\031\016\030\021\041" +
    "\022\026\031\012\032\016\033\040\034\024\035\021\036" +
    "\033\037\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\154\012\155" +
    "\001\001\000\002\001\001\000\004\012\147\001\001\000" +
    "\014\033\040\034\024\035\146\036\033\037\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\033\040\036\103" +
    "\037\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\007\102\012\031\016\030\021\041\022\026\031\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\012\052" +
    "\013\047\014\050\015\051\020\060\026\057\027\056\030" +
    "\055\001\001\000\022\012\052\013\047\014\050\015\051" +
    "\020\075\026\057\027\056\030\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\073\014\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\012" +
    "\052\013\047\014\050\015\051\026\072\027\056\030\055" +
    "\001\001\000\020\012\052\013\047\014\050\015\051\026" +
    "\065\027\056\030\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\012\052\013\047\014" +
    "\050\015\051\027\071\030\055\001\001\000\016\012\052" +
    "\013\047\014\050\015\051\027\070\030\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\012\052\013\047\014\050\015\051\020\100" +
    "\026\057\027\056\030\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\012\052\013\047\014\050\015\051\020\115\023\113\024" +
    "\116\026\057\027\056\030\055\001\001\000\002\001\001" +
    "\000\024\012\052\013\047\014\050\015\051\020\115\023" +
    "\145\026\057\027\056\030\055\001\001\000\004\025\133" +
    "\001\001\000\002\001\001\000\024\012\052\013\047\014" +
    "\050\015\051\020\115\023\132\026\057\027\056\030\055" +
    "\001\001\000\020\007\124\012\031\016\030\017\123\021" +
    "\041\022\026\031\012\001\001\000\024\012\052\013\047" +
    "\014\050\015\051\020\115\023\122\026\057\027\056\030" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\006\126\007\036\012\031\016\030\021" +
    "\041\022\026\031\012\001\001\000\016\007\102\012\031" +
    "\016\030\021\041\022\026\031\012\001\001\000\002\001" +
    "\001\000\020\007\124\012\031\016\030\017\131\021\041" +
    "\022\026\031\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\012\052\013\047\014\050\015\051\020\144" +
    "\026\057\027\056\030\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\012\052\013\047\014\050\015" +
    "\051\020\115\023\113\024\151\026\057\027\056\030\055" +
    "\001\001\000\002\001\001\000\020\007\124\012\031\016" +
    "\030\017\153\021\041\022\026\031\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\160\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 Tree= new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }



    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // print ::= PRINT RO rvalue RC S 
            { parser.Tree.reduce(5,"print",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*print*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // exp3 ::= sign variable 
            { parser.Tree.reduce(2,"exp3",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*exp3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // exp3 ::= immediate 
            { parser.Tree.reduce(1,"exp3",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*exp3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exp3 ::= variable 
            { parser.Tree.reduce(1,"exp3",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*exp3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exp2 ::= exp3 
            { parser.Tree.reduce(1,"exp2",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*exp2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exp2 ::= RO rvalue RC 
            { parser.Tree.reduce(3,"exp2",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*exp2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression ::= exp2 
            { parser.Tree.reduce(1,"expression",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression ::= expression DIV exp2 
            { parser.Tree.reduce(3,"expression",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expression ::= expression STAR exp2 
            { parser.Tree.reduce(3,"expression",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // rvalue ::= expression 
            { parser.Tree.reduce(1,"rvalue",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*rvalue*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // rvalue ::= rvalue MINUS expression 
            { parser.Tree.reduce(3,"rvalue",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*rvalue*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // rvalue ::= rvalue PLUS expression 
            { parser.Tree.reduce(3,"rvalue",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*rvalue*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // comparator ::= NOT EQ 
            { parser.Tree.reduce(2,"comparator",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*comparator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // comparator ::= EQ EQ 
            { parser.Tree.reduce(2,"comparator",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*comparator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // comparator ::= MAJ_EQ 
            { parser.Tree.reduce(1,"comparator",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*comparator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // comparator ::= MIN_EQ 
            { parser.Tree.reduce(1,"comparator",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*comparator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // comparator ::= MAJ 
            { parser.Tree.reduce(1,"comparator",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*comparator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // comparator ::= MIN 
            { parser.Tree.reduce(1,"comparator",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*comparator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // boolCondition ::= rvalue comparator rvalue 
            { parser.Tree.reduce(3,"boolCondition",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*boolCondition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // boolCondition_l ::= boolCondition 
            { parser.Tree.reduce(1,"boolCondition_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*boolCondition_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // boolCondition_l ::= NOT boolCondition 
            { parser.Tree.reduce(2,"boolCondition_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*boolCondition_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // boolCondition_l ::= boolCondition_l OR boolCondition 
            { parser.Tree.reduce(3,"boolCondition_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*boolCondition_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // boolCondition_l ::= boolCondition_l AND boolCondition 
            { parser.Tree.reduce(3,"boolCondition_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*boolCondition_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ifConstruct ::= IF RO boolCondition_l RC blockOfInstruction ELSE blockOfInstruction 
            { parser.Tree.reduce(7,"ifConstruct",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*ifConstruct*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ifConstruct ::= IF RO boolCondition_l RC blockOfInstruction 
            { parser.Tree.reduce(5,"ifConstruct",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*ifConstruct*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // whileConstruct ::= WHILE RO boolCondition_l RC blockOfInstruction 
            { parser.Tree.reduce(5,"whileConstruct",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*whileConstruct*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // blockOfInstruction ::= instruction 
            { parser.Tree.reduce(1,"blockOfInstruction",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*blockOfInstruction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // blockOfInstruction ::= BO instructionList BC 
            { parser.Tree.reduce(3,"blockOfInstruction",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*blockOfInstruction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // uimmediate ::= DOUBLE 
            { parser.Tree.reduce(1,"uimmediate",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*uimmediate*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // uimmediate ::= INT 
            { parser.Tree.reduce(1,"uimmediate",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*uimmediate*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sign ::= MINUS 
            { parser.Tree.reduce(1,"sign",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*sign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sign ::= PLUS 
            { parser.Tree.reduce(1,"sign",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*sign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // immediate ::= sign uimmediate 
            { parser.Tree.reduce(2,"immediate",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*immediate*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // immediate ::= uimmediate 
            { parser.Tree.reduce(1,"immediate",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*immediate*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // assignment ::= variable EQ rvalue 
            { parser.Tree.reduce(3,"assignment",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*assignment*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instruction ::= print 
            { parser.Tree.reduce(1,"instruction",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*instruction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instruction ::= ifConstruct 
            { parser.Tree.reduce(1,"instruction",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*instruction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instruction ::= whileConstruct 
            { parser.Tree.reduce(1,"instruction",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*instruction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruction ::= assignment S 
            { parser.Tree.reduce(2,"instruction",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*instruction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instructionList ::= instruction 
            { parser.Tree.reduce(1,"instructionList",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*instructionList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instructionList ::= instructionList instruction 
            { parser.Tree.reduce(2,"instructionList",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*instructionList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // otherModifier ::= STATIC 
            { parser.Tree.reduce(1,"otherModifier",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(24/*otherModifier*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // otherModifier ::= EXTERN 
            { parser.Tree.reduce(1,"otherModifier",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(24/*otherModifier*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // lengthModifier ::= LONG 
            { parser.Tree.reduce(1,"lengthModifier",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(25/*lengthModifier*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lengthModifier ::= SHORT 
            { parser.Tree.reduce(1,"lengthModifier",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(25/*lengthModifier*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // signModifier ::= UNSIGNED 
            { parser.Tree.reduce(1,"signModifier",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(26/*signModifier*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // signModifier ::= SIGNED 
            { parser.Tree.reduce(1,"signModifier",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(26/*signModifier*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // baseType ::= DOUBLE_TYPE 
            { parser.Tree.reduce(1,"baseType",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(29/*baseType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // baseType ::= INT_TYPE 
            { parser.Tree.reduce(1,"baseType",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(29/*baseType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lengthedType ::= baseType 
            { parser.Tree.reduce(1,"lengthedType",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(28/*lengthedType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lengthedType ::= lengthModifier baseType 
            { parser.Tree.reduce(2,"lengthedType",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(28/*lengthedType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // signedType ::= lengthedType 
            { parser.Tree.reduce(1,"signedType",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(27/*signedType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // signedType ::= signModifier lengthedType 
            { parser.Tree.reduce(2,"signedType",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(27/*signedType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= signedType 
            { parser.Tree.reduce(1,"type",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= otherModifier signedType 
            { parser.Tree.reduce(2,"type",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // variable ::= STAR variable 
            { parser.Tree.reduce(2,"variable",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*variable*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // variable ::= ID SO SC 
            { parser.Tree.reduce(3,"variable",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*variable*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // variable ::= ID SO variable SC 
            { parser.Tree.reduce(4,"variable",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*variable*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // variable ::= ID SO INT SC 
            { parser.Tree.reduce(4,"variable",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*variable*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // variable ::= ID 
            { parser.Tree.reduce(1,"variable",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*variable*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // variableList ::= variable 
            { parser.Tree.reduce(1,"variableList",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*variableList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // variableList ::= variableList CM variable 
            { parser.Tree.reduce(3,"variableList",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*variableList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaration ::= type variableList S 
            { parser.Tree.reduce(3,"declaration",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declarationList ::= 
            { parser.Tree.reduce(0,"declarationList",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*declarationList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declarationList ::= declarationList declaration 
            { parser.Tree.reduce(2,"declarationList",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*declarationList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= declarationList instructionList 
            { parser.Tree.reduce(2,"prog",1);
              Object RESULT = null;
		 System.out.println("Program parsed successfully!"); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*prog*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

