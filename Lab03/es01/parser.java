
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun May 01 15:45:53 CEST 2016
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Sun May 01 15:45:53 CEST 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\065\000\002\002\004\000\002\003\004\000\002\004" +
    "\004\000\002\004\002\000\002\005\005\000\002\011\005" +
    "\000\002\011\003\000\002\012\003\000\002\012\006\000" +
    "\002\012\006\000\002\010\003\000\002\010\003\000\002" +
    "\006\004\000\002\006\003\000\002\007\004\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\016\005" +
    "\000\002\013\003\000\002\013\004\000\002\015\003\000" +
    "\002\015\003\000\002\014\003\000\002\014\003\000\002" +
    "\017\005\000\002\017\003\000\002\021\007\000\002\022" +
    "\007\000\002\022\011\000\002\024\005\000\002\024\005" +
    "\000\002\024\004\000\002\024\003\000\002\023\005\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\004\000\002\025\004\000\002\020" +
    "\005\000\002\020\005\000\002\020\003\000\002\026\005" +
    "\000\002\026\005\000\002\026\003\000\002\027\005\000" +
    "\002\027\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\004\000\002\031\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\135\000\016\006\ufffe\007\ufffe\010\ufffe\011\ufffe\042" +
    "\ufffe\043\ufffe\001\002\000\016\006\022\007\024\010\021" +
    "\011\011\042\014\043\016\001\002\000\004\002\006\001" +
    "\002\000\004\002\001\001\002\000\020\002\ufff0\006\ufff0" +
    "\007\ufff0\010\ufff0\011\ufff0\013\ufff0\017\ufff0\001\002\000" +
    "\016\002\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\017\ufff4" +
    "\001\002\000\004\014\134\001\002\000\004\023\133\001" +
    "\002\000\016\006\uffff\007\uffff\010\uffff\011\uffff\042\uffff" +
    "\043\uffff\001\002\000\004\006\ufff7\001\002\000\020\002" +
    "\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\013\ufff2\017\ufff2" +
    "\001\002\000\004\006\ufff6\001\002\000\004\036\131\001" +
    "\002\000\020\002\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1" +
    "\013\ufff1\017\ufff1\001\002\000\004\014\075\001\002\000" +
    "\044\015\ufffa\020\ufffa\021\ufffa\022\070\023\ufffa\024\ufffa" +
    "\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\034" +
    "\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\001\002\000\004" +
    "\006\022\001\002\000\004\014\027\001\002\000\014\002" +
    "\000\006\022\007\024\010\021\011\011\001\002\000\016" +
    "\002\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\017\ufff5\001" +
    "\002\000\016\004\032\005\040\006\022\014\030\024\037" +
    "\025\031\001\002\000\016\004\032\005\040\006\022\014" +
    "\030\024\037\025\031\001\002\000\010\004\uffeb\005\uffeb" +
    "\006\uffeb\001\002\000\036\015\uffea\023\uffea\024\uffea\025" +
    "\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\034\uffea" +
    "\036\uffea\037\uffea\040\uffea\041\uffea\001\002\000\036\015" +
    "\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee" +
    "\031\uffee\032\uffee\034\uffee\036\uffee\037\uffee\040\uffee\041" +
    "\uffee\001\002\000\036\015\uffcf\023\uffcf\024\uffcf\025\uffcf" +
    "\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\034\uffcf\036" +
    "\uffcf\037\uffcf\040\uffcf\041\uffcf\001\002\000\010\004\032" +
    "\005\040\006\022\001\002\000\036\015\uffd0\023\uffd0\024" +
    "\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0" +
    "\034\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\001\002\000" +
    "\010\004\uffec\005\uffec\006\uffec\001\002\000\036\015\uffe9" +
    "\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031" +
    "\uffe9\032\uffe9\034\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9" +
    "\001\002\000\036\015\uffd1\023\uffd1\024\uffd1\025\uffd1\026" +
    "\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\034\uffd1\036\uffd1" +
    "\037\uffd1\040\uffd1\041\uffd1\001\002\000\036\015\uffd3\023" +
    "\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3" +
    "\032\uffd3\034\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\001" +
    "\002\000\036\015\uffd6\023\uffd6\024\uffd6\025\uffd6\026\052" +
    "\027\053\030\uffd6\031\uffd6\032\uffd6\034\uffd6\036\uffd6\037" +
    "\uffd6\040\uffd6\041\uffd6\001\002\000\010\015\047\024\045" +
    "\025\046\001\002\000\016\004\032\005\040\006\022\014" +
    "\030\024\037\025\031\001\002\000\016\004\032\005\040" +
    "\006\022\014\030\024\037\025\031\001\002\000\004\023" +
    "\050\001\002\000\020\002\uffcd\006\uffcd\007\uffcd\010\uffcd" +
    "\011\uffcd\013\uffcd\017\uffcd\001\002\000\036\015\uffd7\023" +
    "\uffd7\024\uffd7\025\uffd7\026\052\027\053\030\uffd7\031\uffd7" +
    "\032\uffd7\034\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\001" +
    "\002\000\016\004\032\005\040\006\022\014\030\024\037" +
    "\025\031\001\002\000\016\004\032\005\040\006\022\014" +
    "\030\024\037\025\031\001\002\000\036\015\uffd4\023\uffd4" +
    "\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032" +
    "\uffd4\034\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\001\002" +
    "\000\036\015\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027" +
    "\uffd5\030\uffd5\031\uffd5\032\uffd5\034\uffd5\036\uffd5\037\uffd5" +
    "\040\uffd5\041\uffd5\001\002\000\036\015\uffd8\023\uffd8\024" +
    "\uffd8\025\uffd8\026\052\027\053\030\uffd8\031\uffd8\032\uffd8" +
    "\034\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\001\002\000" +
    "\036\015\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce" +
    "\030\uffce\031\uffce\032\uffce\034\uffce\036\uffce\037\uffce\040" +
    "\uffce\041\uffce\001\002\000\036\015\uffed\023\uffed\024\uffed" +
    "\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed\034" +
    "\uffed\036\uffed\037\uffed\040\uffed\041\uffed\001\002\000\010" +
    "\015\062\024\045\025\046\001\002\000\036\015\uffd2\023" +
    "\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2" +
    "\032\uffd2\034\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\001" +
    "\002\000\006\021\065\023\066\001\002\000\006\021\ufffb" +
    "\023\ufffb\001\002\000\004\006\022\001\002\000\016\006" +
    "\ufffd\007\ufffd\010\ufffd\011\ufffd\042\ufffd\043\ufffd\001\002" +
    "\000\006\021\ufffc\023\ufffc\001\002\000\006\004\072\006" +
    "\022\001\002\000\004\020\074\001\002\000\004\020\073" +
    "\001\002\000\042\015\ufff9\020\ufff9\021\ufff9\023\ufff9\024" +
    "\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9\032\ufff9" +
    "\034\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9\001\002\000" +
    "\042\015\ufff8\020\ufff8\021\ufff8\023\ufff8\024\ufff8\025\ufff8" +
    "\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\034\ufff8\036" +
    "\ufff8\037\ufff8\040\ufff8\041\ufff8\001\002\000\020\004\032" +
    "\005\040\006\022\014\030\024\037\025\031\041\101\001" +
    "\002\000\010\015\116\037\115\040\117\001\002\000\010" +
    "\015\uffe0\037\uffe0\040\uffe0\001\002\000\022\024\045\025" +
    "\046\030\111\031\110\032\104\034\107\036\105\041\106" +
    "\001\002\000\016\004\032\005\040\006\022\014\030\024" +
    "\037\025\031\001\002\000\010\015\uffe1\037\uffe1\040\uffe1" +
    "\001\002\000\016\004\032\005\040\006\022\014\030\024" +
    "\037\025\031\001\002\000\016\004\uffdc\005\uffdc\006\uffdc" +
    "\014\uffdc\024\uffdc\025\uffdc\001\002\000\004\036\113\001" +
    "\002\000\004\036\112\001\002\000\016\004\uffdb\005\uffdb" +
    "\006\uffdb\014\uffdb\024\uffdb\025\uffdb\001\002\000\016\004" +
    "\uffdd\005\uffdd\006\uffdd\014\uffdd\024\uffdd\025\uffdd\001\002" +
    "\000\016\004\uffde\005\uffde\006\uffde\014\uffde\024\uffde\025" +
    "\uffde\001\002\000\016\004\uffd9\005\uffd9\006\uffd9\014\uffd9" +
    "\024\uffd9\025\uffd9\001\002\000\016\004\uffda\005\uffda\006" +
    "\uffda\014\uffda\024\uffda\025\uffda\001\002\000\014\015\uffdf" +
    "\024\045\025\046\037\uffdf\040\uffdf\001\002\000\016\004" +
    "\032\005\040\006\022\014\030\024\037\025\031\001\002" +
    "\000\014\006\022\007\024\010\021\011\011\016\123\001" +
    "\002\000\016\004\032\005\040\006\022\014\030\024\037" +
    "\025\031\001\002\000\010\015\uffe2\037\uffe2\040\uffe2\001" +
    "\002\000\020\002\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7" +
    "\013\uffe7\017\uffe7\001\002\000\020\002\uffe5\006\uffe5\007" +
    "\uffe5\010\uffe5\011\uffe5\013\126\017\uffe5\001\002\000\012" +
    "\006\022\007\024\010\021\011\011\001\002\000\014\006" +
    "\022\007\024\010\021\011\011\017\125\001\002\000\020" +
    "\002\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\013\uffe8\017" +
    "\uffe8\001\002\000\014\006\022\007\024\010\021\011\011" +
    "\016\123\001\002\000\020\002\uffe4\006\uffe4\007\uffe4\010" +
    "\uffe4\011\uffe4\013\uffe4\017\uffe4\001\002\000\010\015\uffe3" +
    "\037\uffe3\040\uffe3\001\002\000\016\004\032\005\040\006" +
    "\022\014\030\024\037\025\031\001\002\000\010\023\uffef" +
    "\024\045\025\046\001\002\000\020\002\ufff3\006\ufff3\007" +
    "\ufff3\010\ufff3\011\ufff3\013\ufff3\017\ufff3\001\002\000\020" +
    "\004\032\005\040\006\022\014\030\024\037\025\031\041" +
    "\101\001\002\000\010\015\136\037\115\040\117\001\002" +
    "\000\014\006\022\007\024\010\021\011\011\016\123\001" +
    "\002\000\020\002\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6" +
    "\013\uffe6\017\uffe6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\135\000\006\003\004\004\003\001\001\000\024\005" +
    "\012\006\024\007\007\010\022\012\016\016\011\021\014" +
    "\022\017\031\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\062\012\063\001\001\000\002\001\001\000\016\007\025" +
    "\012\016\016\011\021\014\022\017\031\006\001\001\000" +
    "\002\001\001\000\022\012\035\013\033\014\032\015\034" +
    "\020\043\026\042\027\041\030\040\001\001\000\022\012" +
    "\035\013\033\014\032\015\034\020\060\026\042\027\041" +
    "\030\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\056\014\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\012\035\013\033\014\032\015" +
    "\034\026\055\027\041\030\040\001\001\000\020\012\035" +
    "\013\033\014\032\015\034\026\050\027\041\030\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\012\035\013\033\014\032\015\034\027\054\030" +
    "\040\001\001\000\016\012\035\013\033\014\032\015\034" +
    "\027\053\030\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\012\035\013\033\014\032\015\034\020\077\023" +
    "\076\024\075\026\042\027\041\030\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\102\001\001\000" +
    "\024\012\035\013\033\014\032\015\034\020\077\023\101" +
    "\026\042\027\041\030\040\001\001\000\002\001\001\000" +
    "\022\012\035\013\033\014\032\015\034\020\113\026\042" +
    "\027\041\030\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\012\035\013\033\014\032\015\034" +
    "\020\077\023\127\026\042\027\041\030\040\001\001\000" +
    "\020\007\120\012\016\016\011\017\121\021\014\022\017" +
    "\031\006\001\001\000\024\012\035\013\033\014\032\015" +
    "\034\020\077\023\117\026\042\027\041\030\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\006\123\007\007\012\016\016\011\021\014\022\017" +
    "\031\006\001\001\000\016\007\025\012\016\016\011\021" +
    "\014\022\017\031\006\001\001\000\002\001\001\000\020" +
    "\007\120\012\016\016\011\017\126\021\014\022\017\031" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\012\035\013\033\014\032\015\034\020\131\026\042\027" +
    "\041\030\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\012\035\013\033\014\032\015\034\020\077\023" +
    "\076\024\134\026\042\027\041\030\040\001\001\000\002" +
    "\001\001\000\020\007\120\012\016\016\011\017\136\021" +
    "\014\022\017\031\006\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // print ::= PRINT RO rvalue RC S 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*print*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp3 ::= sign variable 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*exp3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp3 ::= immediate 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*exp3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp3 ::= variable 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*exp3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp2 ::= exp3 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*exp2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp2 ::= RO rvalue RC 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*exp2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= exp2 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= expression DIV exp2 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= expression STAR exp2 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // rvalue ::= expression 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*rvalue*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // rvalue ::= rvalue MINUS expression 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*rvalue*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // rvalue ::= rvalue PLUS expression 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*rvalue*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // comparator ::= NOT EQ 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*comparator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comparator ::= EQ EQ 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*comparator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comparator ::= MAJ_EQ 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*comparator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // comparator ::= MIN_EQ 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*comparator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // comparator ::= MAJ 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*comparator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // comparator ::= MIN 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*comparator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // boolCondition ::= rvalue comparator rvalue 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*boolCondition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // boolCondition_l ::= boolCondition 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*boolCondition_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // boolCondition_l ::= NOT boolCondition 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*boolCondition_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // boolCondition_l ::= boolCondition_l OR boolCondition 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*boolCondition_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // boolCondition_l ::= boolCondition_l AND boolCondition 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*boolCondition_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ifConstruct ::= IF RO boolCondition_l RC blockOfInstruction ELSE blockOfInstruction 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*ifConstruct*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ifConstruct ::= IF RO boolCondition_l RC blockOfInstruction 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*ifConstruct*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // whileConstruct ::= WHILE RO boolCondition_l RC blockOfInstruction 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*whileConstruct*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // blockOfInstruction ::= instruction 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*blockOfInstruction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // blockOfInstruction ::= BO instructionList BC 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*blockOfInstruction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // uimmediate ::= DOUBLE 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*uimmediate*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // uimmediate ::= INT 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*uimmediate*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sign ::= MINUS 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*sign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sign ::= PLUS 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*sign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // immediate ::= sign uimmediate 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*immediate*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // immediate ::= uimmediate 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*immediate*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // assignment ::= variable EQ rvalue 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*assignment*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruction ::= print 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*instruction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruction ::= ifConstruct 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*instruction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruction ::= whileConstruct 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*instruction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruction ::= assignment S 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*instruction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instructionList ::= instruction 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*instructionList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instructionList ::= instructionList instruction 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*instructionList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= DOUBLE_TYPE 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= INT_TYPE 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // variable ::= ID SO variable SC 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*variable*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // variable ::= ID SO INT SC 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*variable*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // variable ::= ID 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*variable*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // variableList ::= variable 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*variableList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // variableList ::= variableList CM variable 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*variableList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaration ::= type variableList S 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declarationList ::= 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*declarationList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declarationList ::= declarationList declaration 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*declarationList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= declarationList instructionList 
            { 
              Object RESULT = null;
		 System.out.println("Program parsed successfully!"); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*prog*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

