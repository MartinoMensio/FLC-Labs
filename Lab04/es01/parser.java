
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon May 02 15:44:45 CEST 2016
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Mon May 02 15:44:45 CEST 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\027\000\002\002\004\000\002\003\003\000\002\005" +
    "\004\000\002\005\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\006\004\000" +
    "\002\006\004\000\002\010\006\000\002\010\006\000\002" +
    "\012\005\000\002\012\005\000\002\011\005\000\002\011" +
    "\003\000\002\007\005\000\002\007\003\000\002\013\004" +
    "\000\002\014\005\000\002\014\003\000\002\015\003\000" +
    "\002\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\045\000\010\003\013\004\012\011\007\001\002\000" +
    "\012\002\000\003\013\004\012\011\007\001\002\000\012" +
    "\002\ufffb\003\ufffb\004\ufffb\011\ufffb\001\002\000\012\002" +
    "\ufffe\003\ufffe\004\ufffe\011\ufffe\001\002\000\006\003\043" +
    "\004\012\001\002\000\006\004\012\005\036\001\002\000" +
    "\004\002\033\001\002\000\014\006\ufff0\007\ufff0\010\ufff0" +
    "\012\032\013\ufff0\001\002\000\016\002\ufffa\003\ufffa\004" +
    "\ufffa\006\027\010\026\011\ufffa\001\002\000\012\002\ufffc" +
    "\003\ufffc\004\ufffc\011\ufffc\001\002\000\006\006\017\010" +
    "\020\001\002\000\012\002\ufffd\003\ufffd\004\ufffd\011\ufffd" +
    "\001\002\000\012\002\ufff9\003\ufff9\004\ufff9\011\ufff9\001" +
    "\002\000\004\004\012\001\002\000\006\006\ufff2\007\ufff2" +
    "\001\002\000\006\006\024\007\023\001\002\000\004\004" +
    "\012\001\002\000\012\002\ufff7\003\ufff7\004\ufff7\011\ufff7" +
    "\001\002\000\006\006\ufff3\007\ufff3\001\002\000\004\003" +
    "\030\001\002\000\012\002\ufff8\003\ufff8\004\ufff8\011\ufff8" +
    "\001\002\000\004\006\031\001\002\000\012\002\ufff6\003" +
    "\ufff6\004\ufff6\011\ufff6\001\002\000\006\004\uffef\005\uffef" +
    "\001\002\000\004\002\001\001\002\000\006\007\uffec\013" +
    "\uffec\001\002\000\006\007\uffed\013\uffed\001\002\000\006" +
    "\007\uffeb\013\uffeb\001\002\000\006\007\040\013\041\001" +
    "\002\000\006\004\012\005\036\001\002\000\012\006\ufff1" +
    "\007\ufff1\010\ufff1\013\ufff1\001\002\000\006\007\uffee\013" +
    "\uffee\001\002\000\004\006\046\001\002\000\006\006\045" +
    "\007\023\001\002\000\012\002\ufff5\003\ufff5\004\ufff5\011" +
    "\ufff5\001\002\000\012\002\ufff4\003\ufff4\004\ufff4\011\ufff4" +
    "\001\002\000\012\002\uffff\003\uffff\004\uffff\011\uffff\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\045\000\022\003\010\004\005\005\003\006\015\007" +
    "\014\010\013\012\004\013\007\001\001\000\016\004\046" +
    "\006\015\007\014\010\013\012\004\013\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\020\011\043" +
    "\013\007\001\001\000\012\007\033\013\007\014\036\015" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\020\011\021\013\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\024\013\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\007\033\013\007\015\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    nfacts = 0;
    nrules = 0;
    nint = 0;
    n_errors = 0;

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }



    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }
    
    public int nfacts;
    public int nrules;
    public int nint;
    public int n_errors;

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // argument ::= VARIABLE 
            { parser.Tree.reduce(1,"argument",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*argument*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // argument ::= predicate 
            { parser.Tree.reduce(1,"argument",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*argument*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // argument_list ::= argument 
            { parser.Tree.reduce(1,"argument_list",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*argument_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // argument_list ::= argument_list COMMA argument 
            { parser.Tree.reduce(3,"argument_list",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*argument_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // functor ::= ATOM RO 
            { parser.Tree.reduce(2,"functor",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*functor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // predicate ::= ATOM 
            { parser.Tree.reduce(1,"predicate",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*predicate*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // predicate ::= functor argument_list RC 
            { parser.Tree.reduce(3,"predicate",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*predicate*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // predicate_list ::= predicate 
            { parser.Tree.reduce(1,"predicate_list",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*predicate_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // predicate_list ::= predicate_list COMMA predicate 
            { parser.Tree.reduce(3,"predicate_list",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*predicate_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // interrogation ::= INT_SYMBOL error DOT 
            { parser.Tree.reduce(3,"interrogation",0);
              Object RESULT = null;
		 System.err.println("error in interrrogation"); parser.n_errors++; 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*interrogation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // interrogation ::= INT_SYMBOL predicate_list DOT 
            { parser.Tree.reduce(3,"interrogation",0);
              Object RESULT = null;
		 parser.nint++; 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*interrogation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // rule ::= error RULE_SEP error DOT 
            { parser.Tree.reduce(4,"rule",0);
              Object RESULT = null;
		 System.err.println("error in rule"); parser.n_errors++; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // rule ::= predicate RULE_SEP predicate_list DOT 
            { parser.Tree.reduce(4,"rule",0);
              Object RESULT = null;
		 parser.nrules++; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // fact ::= error DOT 
            { parser.Tree.reduce(2,"fact",0);
              Object RESULT = null;
		 System.err.println("error in fact"); parser.n_errors++; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*fact*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // fact ::= predicate DOT 
            { parser.Tree.reduce(2,"fact",0);
              Object RESULT = null;
		 parser.nfacts++; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*fact*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // element ::= error 
            { parser.Tree.reduce(1,"element",0);
              Object RESULT = null;
		 System.err.println("error in element "); parser.n_errors++; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*element*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // element ::= interrogation 
            { parser.Tree.reduce(1,"element",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*element*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // element ::= rule 
            { parser.Tree.reduce(1,"element",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*element*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // element ::= fact 
            { parser.Tree.reduce(1,"element",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*element*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // element_list ::= element 
            { parser.Tree.reduce(1,"element_list",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*element_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // element_list ::= element_list element 
            { parser.Tree.reduce(2,"element_list",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*element_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= element_list 
            { parser.Tree.reduce(1,"prog",1);
              Object RESULT = null;
		
    if(parser.n_errors > 0) {
        System.out.println("Detected some errors!");
    } else if(parser.nfacts == 0) {
        System.out.println("Must have some facts!");
    } else if(parser.nint != 1){
        System.out.println("Must have one interrogation!");
    } else {
        System.out.println("prog scanned correctly! " + parser.nfacts + " facts " + parser.nrules + " rules " + parser.nint + " interrogation");
    }

              CUP$parser$result = new java_cup.runtime.Symbol(1/*prog*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

